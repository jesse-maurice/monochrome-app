// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication info
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  password      String?   // Hashed password for email/password auth
  image         String?   // Avatar URL
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth-related fields
  accounts      Account[]
  sessions      Session[]

  // E-commerce and content relations
  photos        Photo[]
  collections   Collection[]
  likes         Like[]
  purchases     Purchase[]
  cart          CartItem[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Photography and E-commerce models
model Photo {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  price       Decimal  @default(0)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Metadata
  width       Int?
  height      Int?
  size        Int?     // in bytes
  format      String?  // jpg, png, etc.
  
  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  collections Collection[]
  likes       Like[]
  purchases   Purchase[]
  cartItems   CartItem[]
  tags        Tag[]

  @@index([userId])
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  photos      Photo[]

  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  photoId   String
  user      User     @relation(fields: [userId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id])

  @@unique([userId, photoId])
}

model Purchase {
  id            String   @id @default(cuid())
  transactionId String   @unique  // Payment processor transaction ID
  amount        Decimal
  currency      String   @default("USD")
  status        String   // pending, completed, failed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  userId        String
  photoId       String
  user          User     @relation(fields: [userId], references: [id])
  photo         Photo    @relation(fields: [photoId], references: [id])

  @@index([userId])
  @@index([photoId])
}

model CartItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  photoId   String
  user      User     @relation(fields: [userId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id])

  @@unique([userId, photoId])
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  photos      Photo[]
}